@test
subroutine test_derx_odd()
  use funit

  use decomp_2d
  use param
  use variables
  use var
  use MPI

  real, allocatable, dimension(:, :, :) :: func, dfunc

    !! Initialise MPI
  call MPI_INIT(ierr)
  call MPI_COMM_RANK(MPI_COMM_WORLD,nrank,ierr)
  call MPI_COMM_SIZE(MPI_COMM_WORLD,nproc,ierr)

  nx = 64
  ny = 32
  nz = 16
  dx = 1. / nx

  allocate(func(nx, ny, nz))

  ! real(mytype), dimension(nx, ny, nz) :: di1, sx, ffx, fsx, fwx

  call parameter()
  call decomp_2d_init(nx,ny,nz,1,1) ! serial test for now
  ifirstder = 4
  nclx1=1
  nclxn=1
  ncly1=1
  nclyn=1
  nclz1=1
  nclzn=1
  call init_variables()
  call schemes()
  do k=1,nz
     do j=1,ny
        do i=1,nx
           x = i*dx*4.*pi
           func(i,j,k)   = sin(x)  !odd
        enddo
     enddo
  enddo

  write(*,*) "Hello!"
  print *, func
  @assertTrue(1 > 0)

end subroutine test_derx_odd
