@test
subroutine test_derx_odd()
  use funit

  use decomp_2d
  use param
  use variables
  use var
  use MPI

  real, allocatable, dimension(:, :, :) :: func, dfunc, expected_dfunc

    !! Initialise MPI
  call MPI_INIT(ierr)
  call MPI_COMM_RANK(MPI_COMM_WORLD,nrank,ierr)
  call MPI_COMM_SIZE(MPI_COMM_WORLD,nproc,ierr)

  nx = 64
  ny = 32
  nz = 16
  dx = 1. / nx

  allocate(func(nx, ny, nz))
  allocate(dfunc(nx, ny, nz))
  allocate(expected_dfunc(nx, ny, nz))

  ! real(mytype), dimension(nx, ny, nz) :: di1, sx, ffx, fsx, fwx

  call parameter()
  call decomp_2d_init(nx,ny,nz,1,1) ! serial test for now
  ifirstder = 4
  nclx1=0
  nclxn=0
  ncly1=0
  nclyn=0
  nclz1=0
  nclzn=0
  call init_variables()
  call schemes()
  do k=1,nz
     do j=1,ny
        do i=1,nx
           x = (i-1.)*dx*4.*pi
           func(i,j,k)   = sin(x)  !odd
           expected_dfunc(i,j,k) = 4.*pi*cos(x)
        enddo
     enddo
  enddo


  call derx(dfunc, func, di1, sx, ffx, fsx, fwx, nx, ny, nz, 0)
  @assertEqual(dfunc, expected_dfunc, tolerance=1E-2)

call mpi_finalize(ierr)

end subroutine test_derx_odd
